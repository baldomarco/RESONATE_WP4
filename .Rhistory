ggtitle("Natural Mortality in Different Management and RCP scenarios") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Natural Mortality [m3/ha]") +
scale_color_manual(values = custom_palette)+
theme_bw()
Natural_mortality <- Natural_mortality + theme(plot.title = element_text(lineheight = 2, face = "bold", color = "black", size = 18))
Natural_mortality <- Natural_mortality + theme(plot.title = element_text(hjust = 0.5))
Natural_mortality <- Natural_mortality + theme(axis.title.y = element_text(size = rel(1.5), angle = 90))
Natural_mortality <- Natural_mortality + theme(axis.title.x = element_text(size = rel(1.5), angle = 0))
Natural_mortality
Annual_harvest <- ggplot(WP4_table, aes(year, Annual_harvest, color = run)) +
geom_line(size = 0.6) +
ggtitle("Annual Harvest in Different Management and RCP scenarios") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Annual Harvest [m3/ha]") +
scale_color_manual(values = custom_palette)+
theme_bw()
Annual_harvest <- Annual_harvest + theme(plot.title = element_text(lineheight = 2, face = "bold", color = "black", size = 18))
Annual_harvest <- Annual_harvest + theme(plot.title = element_text(hjust = 0.5))
Annual_harvest <- Annual_harvest + theme(axis.title.y = element_text(size = rel(1.5), angle = 90))
Annual_harvest <- Annual_harvest + theme(axis.title.x = element_text(size = rel(1.5), angle = 0))
Annual_harvest
H_BA_plot <- ggplot(H_avg, aes(year, shannon_BA_avg, color = run)) +
geom_line(size = 0.7) +
ggtitle("Shannon Entropy based on Basal Area Tree Species Proportion") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Shannon Index [H]") +
scale_color_manual(values = custom_palette)+
theme_bw()
H_BA_plot <- H_BA_plot + theme(plot.title = element_text(lineheight = 2, face = "bold", color = "black", size = 18))
H_BA_plot <- H_BA_plot + theme(plot.title = element_text(hjust = 0.5))
H_BA_plot <- H_BA_plot + theme(axis.title.y = element_text(size = rel(1.5), angle = 90))
H_BA_plot <- H_BA_plot + theme(axis.title.x = element_text(size = rel(1.5), angle = 0))
H_BA_plot
H_VOL_plot <- ggplot(H_avg, aes(year, shannon_VOL_avg, color = run)) +
geom_line(size = 0.7) +
ggtitle("Shannon Entropy based on Volume Tree Species Proportion") +
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Shannon Index [H]") +
scale_color_manual(values = custom_palette)+
theme_bw()
H_VOL_plot <- H_VOL_plot + theme(plot.title = element_text(lineheight = 2, face = "bold", color = "black", size = 18))
H_VOL_plot <- H_VOL_plot + theme(plot.title = element_text(hjust = 0.5))
H_VOL_plot <- H_VOL_plot + theme(axis.title.y = element_text(size = rel(1.5), angle = 90))
H_VOL_plot <- H_VOL_plot + theme(axis.title.x = element_text(size = rel(1.5), angle = 0))
H_VOL_plot
area<-lnd$area[1]
ylim.bb <- c(0, 600000)                                                                                          # in this example, precipitation look the link down
ylim.w <- c(0, 1700000)
b <- diff(ylim.w)/diff(ylim.bb)
a <- ylim.w[1] - b*ylim.bb[1]
# TO MAKE 2 LINE AND 2 DIFFERENT SCALE PLOT "https://stackoverflow.com/questions/3099219/ggplot-with-2-y-axes-on-each-side-and-different-scales"
ggplot(damage.all,aes(year,killedVolume/area))+
geom_col(fill="pink",col="pink")+
geom_point(aes(y = a+ barkbeetle/area*b), data = damage.all,size=1) +
scale_y_continuous(name="wind [m3/ha]", sec.axis = sec_axis(~ (. - a)/b,name = "barkbeetle damage [m3/ha]"))+
facet_wrap(~run, ncol=3)+
theme_bw()
b <- diff(ylim.w)/diff(ylim.bb)
a <- ylim.w[1] - b*ylim.bb[1]
# TO MAKE 2 LINE AND 2 DIFFERENT SCALE PLOT "https://stackoverflow.com/questions/3099219/ggplot-with-2-y-axes-on-each-side-and-different-scales"
ggplot(damage.all,aes(year,killedVolume/area))+
geom_col(fill="grey",col="black", size=0.5)+
geom_line(aes(y = a+ barkbeetle/area*b), data = damage.all, size=1, col="pink") +
scale_y_continuous(name="Wind damage [m3/ha]", sec.axis = sec_axis(~ (. - a)/b,name = "Barkbeetle [m3/ha]"))+
xlab("Year")+
facet_wrap(~run, ncol=3)+
theme_bw()
# Here gave me the right values
absolute_damage <- (damage.all %>% group_by(case) %>% summarise(mean(barkbeetle/area),mean(na.omit(killedVolume/area))))     # SUMMARISE THE DAMAGE IMPACT IN NUMERIC VALUES AND IN MEAN FOR BOTH BB AD WIND
ylim.bb <- c(0, 600000)                                                                                                      # In this example, precipitation look the link down
ylim.w <- c(0, 1700000)                                                                                                      # SET THE LIMIT OF THE AXIS IN THIS CASE BASED ON M3
b <- diff(ylim.bb)/diff(ylim.w)                                                                                              # MATHEMATIC FUCTION TO CREATE THE RIGHT SCALE VALUE BASED ON THE DATA YOU HAVE
a <- ylim.bb[1] - b*ylim.w[1]
# TO MAKE 2 LINE AND 2 DIFFERENT SCALE PLOT "https://stackoverflow.com/questions/3099219/ggplot-with-2-y-axes-on-each-side-and-different-scales"
ggplot(damage.all,aes(year,barkbeetle/area/tot_vol))+                                                                         # THE DATA WE WANT TO PLOT 1' DATASET BARKBEETLE IN THIS CASE
geom_col(fill="pink",col="pink")+
geom_point(aes(y = a + killedVolume/area/tot_vol*b), data = damage.all,size=2) +                                                    # SECOND Y AXIS TO PLOT IN THE SAME PLOT WIND RELATIVE DAMAGE IN TERMS OF LANDSCAPE VOLUME. DATA IS WHERE YPU TAKE THE DATA FOR THAT FUNCTION.
scale_y_continuous(name="Barkbeetle relative damage", sec.axis = sec_axis(~ (. - a)/b,name = "Wind relative damage"))+
facet_wrap(~run, ncol=3)+
theme_bw()
# SET THE SCALE OF THE Y AXIS. NAME IS THE NAME OF THE LABEL. FIRST Y AXIS SCALE REFERENCE ONE. SEC_AXIS SET THE SECOND AXIS TILDE ATTACH, (.,A)/B IS THE FORMULA.
rel_damage <- (damage.all %>%
group_by(case) %>%
summarise((barkbeetle/tot_vol),
(killedVolume/tot_vol)))
relative_damage
# variant 1
ylim.bb <- c(0, 600000)                                                                                          # in this example, precipitation look the link down
ylim.w <- c(0, 1700000)
b <- diff(ylim.w)/diff(ylim.bb)
a <- ylim.w[1] - b*ylim.bb[1]
# TO MAKE 2 LINE AND 2 DIFFERENT SCALE PLOT "https://stackoverflow.com/questions/3099219/ggplot-with-2-y-axes-on-each-side-and-different-scales"
ggplot(damage.all,aes(year,killedVolume/area/tot_vol))+
geom_col(fill="pink",col="pink")+
geom_point(aes(y = a+ barkbeetle/area/tot_vol*b), data = damage.all,size=1) +
scale_y_continuous(name="Wind relative damage", sec.axis = sec_axis(~ (. - a)/b,name = "Barkbeetle relative damage"))+
facet_wrap(~run, ncol=3)+
theme_bw()
b <- diff(ylim.w)/diff(ylim.bb)
a <- ylim.w[1] - b*ylim.bb[1]
# TO MAKE 2 LINE AND 2 DIFFERENT SCALE PLOT "https://stackoverflow.com/questions/3099219/ggplot-with-2-y-axes-on-each-side-and-different-scales"
ggplot(damage.all,aes(year,killedVolume/area/tot_vol))+
geom_col(fill="grey",col="black")+
geom_line(aes(y = a+ barkbeetle/area/tot_vol*b), data = damage.all, size=0.9, col="pink") +
scale_y_continuous(name="Wind relative damage on total volume", sec.axis = sec_axis(~ (. - a)/b,name = "Barkbeetle relative damage on total volume"))+
facet_wrap(~run, ncol=3)+
theme_bw()
dev.off()
dev.off()
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
install.packages("ggradar")
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
install.packages("ggradar")
library(ggradar)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
install.packages("ggradar")
library(fields)
library(tidyr)
library(cowplot)
library(dplyr)
library(purrr)
library(readr)
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
#library(ggradar)
library(fields)
library(tidyr)
library(cowplot)
library(dplyr)
library(purrr)
library(readr)
getwd()
df <- data.frame(Mon=c(100, 0, 34),
Tue=c(100, 0, 48),
Wed=c(100, 0, 58),
Thu=c(100, 0, 67),
Fri=c(100, 0, 55),
Sat=c(100, 0, 29),
Sun=c(100, 0, 18))
#view data
df
# Once the data is in this format, we can use the radarchart() function from the
# fmsb library to create a basic radar chart:
radarchart(df)
gc()
df
gc()
gc()
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
#library(ggradar)
library(fields)
library(tidyr)
library(cowplot)
library(dplyr)
library(purrr)
library(readr)
getwd()
df <- data.frame(Mon=c(100, 0, 34),
Tue=c(100, 0, 48),
Wed=c(100, 0, 58),
Thu=c(100, 0, 67),
Fri=c(100, 0, 55),
Sat=c(100, 0, 29),
Sun=c(100, 0, 18))
#view data
df
# Once the data is in this format, we can use the radarchart() function from the
# fmsb library to create a basic radar chart:
radarchart(df)
radarchart(df,
axistype=1,
pcol='pink',
pfcol=rgb(0.9,0.2,0.5,0.3),
plwd=3,
cglcol='grey',
cglty=1,
axislabcol='grey',
cglwd=0.6,
vlcex=1.1,
title='Customers per Day'
)
data <- read.csv("C:/_R/R_visual_radar/Radar_chart/data.csv")
str(data)
# data <- data[,2:5]
# str(data)
ggplot(data=data,  aes(x=X2, y=Count, group=X3, colour=X3)) +
geom_point(size=5) +
geom_line() +
xlab("Decils") +
ylab("% difference in nÂº Pk") +
ylim(-50,25) + ggtitle("CL")  +
geom_hline(aes(yintercept=0), lwd=1, lty=2) +
scale_x_discrete(limits=c("DC1","DC2","DC3","DC4","DC5","DC6","DC7","DC8","DC9","DC10"))
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
library(ggradar)
knitr::opts_chunk$set(eval=FALSE, echo = TRUE, message = FALSE, warning = FALSE)
library(fmsb)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(scales)
#library(ggradar)
library(fields)
library(tidyr)
library(cowplot)
library(dplyr)
library(purrr)
library(readr)
getwd()
df <- data.frame(Mon=c(100, 0, 34),
Tue=c(100, 0, 48),
Wed=c(100, 0, 58),
Thu=c(100, 0, 67),
Fri=c(100, 0, 55),
Sat=c(100, 0, 29),
Sun=c(100, 0, 18))
#view data
df
# Once the data is in this format, we can use the radarchart() function from the
# fmsb library to create a basic radar chart:
radarchart(df)
radarchart(df,
axistype=1,
pcol='pink',
pfcol=rgb(0.9,0.2,0.5,0.3),
plwd=3,
cglcol='grey',
cglty=1,
axislabcol='grey',
cglwd=0.6,
vlcex=1.1,
title='Customers per Day'
)
data <- read.csv("C:/_R/R_visual_radar/Radar_chart/data.csv")
str(data)
# data <- data[,2:5]
# str(data)
ggplot(data=data,  aes(x=X2, y=Count, group=X3, colour=X3)) +
geom_point(size=5) +
geom_line() +
xlab("Decils") +
ylab("% difference in nÂº Pk") +
ylim(-50,25) + ggtitle("CL")  +
geom_hline(aes(yintercept=0), lwd=1, lty=2) +
scale_x_discrete(limits=c("DC1","DC2","DC3","DC4","DC5","DC6","DC7","DC8","DC9","DC10"))
ggplot(data=data,  aes(x=X2, y=Count, group=X3, colour=X3)) +
geom_point(size=5) +
geom_line() +
xlab("Decils") +
ylab("% difference in nÂº Pk") +
ylim(-50,25) + ggtitle("CL")  +
geom_hline(aes(yintercept=0), lwd=1, lty=2) +
scale_x_discrete(limits=c("DC1","DC2","DC3","DC4","DC5","DC6","DC7","DC8","DC9","DC10")) +
coord_polar()
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
exam_scores
# Define the variable ranges: maximum and minimum
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
# Plot the data for student 1
library(fmsb)
student1_data <- df[c("Max", "Min", "Student.1"), ]
radarchart(student1_data)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
# Reduce plot margin using par()
op <- par(mar = c(1, 2, 2, 1))
create_beautiful_radarchart(student1_data, caxislabels = c(0, 5, 10, 15, 20))
par(op)
# Reduce plot margin using par()
op <- par(mar = c(1, 2, 2, 2))
# Create the radar charts
create_beautiful_radarchart(
data = df, caxislabels = c(0, 5, 10, 15, 20),
color = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Add an horizontal legend
legend(
x = "topright", legend = rownames(df[-c(1,2),]), horiz = FALSE,
bty = "n", pch = 20 , col = c("#00AFBB", "#E7B800", "#FC4E07"),
text.col = "black", cex = 1, pt.cex = 1.5
)
par(op)
# Define colors and titles
colors <- c("#00AFBB", "#E7B800", "#FC4E07")
titles <- c("Student.1", "Student.2", "Student.3")
# Reduce plot margin using par()
# Split the screen in 3 parts
op <- par(mar = c(1, 1, 1, 1))
par(mfrow = c(1,3))
# Create the radar chart
for(i in 1:3){
create_beautiful_radarchart(
data = df[c(1, 2, i+2), ], caxislabels = c(0, 5, 10, 15, 20),
color = colors[i], title = titles[i]
)
}
par(op)
# Create a demo data containing exam scores for 10 students:
set.seed(123)
df <- as.data.frame(
matrix(sample(2:20 , 90 , replace = TRUE),
ncol=9, byrow = TRUE)
)
# In this example the matrix we build up has a vote (variable) between 2 and 20,
# x90 times (total votes=values 10 student x9 subjects), replace the value in
# the empty matrix. ncol = at the number of subject (9), order the frame by
# number of rows of the data frame = 10!
df
colnames(df) <- c(
"Biology", "Physics", "Maths", "Sport", "English",
"Geography", "Art", "Programming", "Music"
)
rownames(df) <- paste0("Student.", 1:nrow(df))
head(df)
# Give the name based on a root = Student and adding the row number from 1 to
# end (10), Same is giving the name of the subject per every column
library(scales)
df_scaled <- round(apply(df, 2, scales::rescale), 2)
df_scaled <- as.data.frame(df_scaled)
head(df_scaled)
# Variables summary
# Get the minimum and the max of every column
col_max <- apply(df_scaled, 2, max)
col_min <- apply(df_scaled, 2, min)
# Calculate the average profile
col_mean <- apply(df_scaled, 2, mean)
# Put together the summary of columns
col_summary <- t(data.frame(Max = col_max, Min = col_min, Average = col_mean))
# Bind variables summary to the data
df_scaled2 <- as.data.frame(rbind(col_summary, df_scaled))
head(df_scaled2)
opar <- par()
# Define settings for plotting in a 3x4 grid, with appropriate margins:
par(mar = rep(0.8,4))
par(mfrow = c(3,4))
# Produce a radar-chart for each student
for (i in 4:nrow(df_scaled2)) {
radarchart(
df_scaled2[c(1:3, i), ],
pfcol = c("#99999980",NA),
pcol= c(NA,2), plty = 1, plwd = 2,
title = row.names(df_scaled2)[i]
)
}
# Restore the standard par() settings
par <- par(opar)
library (ggradar)
# Put row names into  a column named group
library(tidyverse)
df <- exam_scores %>% rownames_to_column("group")
df
# Plotting student 1
ggradar(
df[1, ],
values.radar = c("0", "10", "20"),
grid.min = 0, grid.mid = 10, grid.max = 20
)
ggradar(
df[1, ],
values.radar = c("0", "10", "20"),
grid.min = 0, grid.mid = 10, grid.max = 20,
# Polygons
group.line.width = 1,
group.point.size = 3,
group.colours = "#00AFBB",
# Background and grid lines
background.circle.colour = "white",
gridline.mid.colour = "grey"
)
ggradar(
df,
values.radar = c("0", "10", "20"),
grid.min = 0, grid.mid = 10, grid.max = 20,
# Polygons
group.line.width = 1,
group.point.size = 3,
group.colours = c("#00AFBB", "#E7B800", "#FC4E07"),
# Background and grid lines
background.circle.colour = "white",
gridline.mid.colour = "grey",
legend.position = "bottom"
)
library(tidyverse)
library(ggpubr)
df2 <- t(exam_scores) %>%
as.data.frame() %>%
rownames_to_column("Field")
df2
ggdotchart(
df2, x = "Field", y = "Student.1",
add = "segments", sorting = "descending",
ylab = "Exam Score", title = "Student 1"
)
df3 <- df2 %>%
select(Field, Student.1, Student.2) %>%
pivot_longer(
cols = c(Student.1, Student.2),
names_to = "student",
values_to = "value"
)
ggdotchart(
df3, x = "Field", y = "value",
group = "student", color = "student", palette = "jco",
add = "segment", position = position_dodge(0.3),
sorting = "descending"
)
df4 <- df2 %>%
select(Field, Student.1, Student.2, Student.3) %>%
pivot_longer(
cols = c(Student.1, Student.2, Student.3),
names_to = "student",
values_to = "value"
)
ggdotchart(
df4, x = "Field", y = "value",
group = "student", color = "student", palette = "jco",
add = "segment", position = position_dodge(0.3),
sorting = "descending", facet.by = "student",
rotate = TRUE, legend = "none"
)
library(GGally)
ggparcoord(
iris,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
theme_bw() +
theme(legend.position = "top")
